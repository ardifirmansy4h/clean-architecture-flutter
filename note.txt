Untuk mengambil data karyawan dari core/services dengan prinsip DRY (Don't Repeat Yourself), kita bisa memanfaatkan repository dan model yang sudah didefinisikan di core/services sehingga dapat digunakan lintas fitur. Di sini saya akan menjelaskan alur proses pengambilan data karyawan (getEmployee) dari core/services, dan bagaimana menjaga kode tetap DRY.

Struktur Folder
Berikut adalah ringkasan dari struktur folder yang relevan untuk contoh ini:

kotlin
Copy code
lib/
├── core/
│   └── service/
│       ├── api/
│       │   └── api_service.dart        // API service untuk HTTP request
│       ├── model/
│       │   └── employee_model.dart     // Model data karyawan
│       └── repositories/
│           └── employee_repository.dart // Repository untuk karyawan
├── features/
│   └── some_feature/
│       ├── application/
│       │   └── blocs/
│       │       └── employee_bloc.dart // Bloc untuk mengelola state
│       ├── data/
│       │   ├── datasources/
│       │   │   └── employee_remote_datasource.dart // Datasource yang menggunakan repository
│       │   └── repositories/
│       │       └── employee_repository_impl.dart // Implementasi dari repository di domain
│       ├── domain/
│       │   ├── models/
│       │   │   └── employee.dart // Model domain (bisa saja didelegasikan ke core/service/model)
│       │   ├── repositories/
│       │   │   └── employee_repository.dart // Interface untuk repository
│       │   └── usecases/
│       │       └── get_employee_usecase.dart // Use case untuk mengambil data karyawan
│       └── presentation/
│           └── pages/
│               └── employee_page.dart // UI untuk menampilkan data karyawan
Alur Proses
1. Core Layer (Service & Repository)
File: api_service.dart
Peran: Menyediakan fungsi HTTP umum untuk mengambil data karyawan.
dart
Copy code
// api_service.dart
import 'package:http/http.dart' as http;
import 'dart:convert';

class ApiService {
  final String baseUrl;

  ApiService(this.baseUrl);

  Future<Map<String, dynamic>> getEmployeeById(String id) async {
    final response = await http.get(Uri.parse('$baseUrl/employees/$id'));
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception('Failed to load employee');
    }
  }
}
File: employee_model.dart
Peran: Menyediakan model data karyawan yang dapat digunakan di semua layer.
dart
Copy code
// employee_model.dart
class EmployeeModel {
  final String id;
  final String name;
  final String position;

  EmployeeModel({required this.id, required this.name, required this.position});

  factory EmployeeModel.fromJson(Map<String, dynamic> json) {
    return EmployeeModel(
      id: json['id'],
      name: json['name'],
      position: json['position'],
    );
  }
}
File: employee_repository.dart
Peran: Repository yang mengakses ApiService untuk mengambil data karyawan.
dart
Copy code
// employee_repository.dart
import '../api/api_service.dart';
import '../model/employee_model.dart';

class EmployeeRepository {
  final ApiService apiService;

  EmployeeRepository(this.apiService);

  Future<EmployeeModel> getEmployeeById(String id) async {
    final response = await apiService.getEmployeeById(id);
    return EmployeeModel.fromJson(response);
  }
}
2. Data Layer (Datasource & Repository Implementation)
File: employee_remote_datasource.dart
Peran: Datasource untuk mengakses data karyawan melalui repository di core/service.
dart
Copy code
// employee_remote_datasource.dart
import '../../../core/service/repositories/employee_repository.dart';
import '../../../core/service/model/employee_model.dart';

class EmployeeRemoteDataSource {
  final EmployeeRepository employeeRepository;

  EmployeeRemoteDataSource(this.employeeRepository);

  Future<EmployeeModel> getEmployeeById(String id) async {
    return await employeeRepository.getEmployeeById(id);
  }
}
File: employee_repository_impl.dart
Peran: Implementasi repository untuk domain layer, yang menghubungkan dengan datasource.
dart
Copy code
// employee_repository_impl.dart
import '../../domain/models/employee.dart';
import '../../domain/repositories/employee_repository.dart';
import '../datasources/employee_remote_datasource.dart';

class EmployeeRepositoryImpl implements EmployeeRepository {
  final EmployeeRemoteDataSource remoteDataSource;

  EmployeeRepositoryImpl(this.remoteDataSource);

  @override
  Future<Employee> getEmployeeById(String id) async {
    final employeeModel = await remoteDataSource.getEmployeeById(id);
    return Employee(
      id: employeeModel.id,
      name: employeeModel.name,
      position: employeeModel.position,
    );
  }
}
3. Domain Layer (Use Case & Repository Interface)
File: employee_repository.dart
Peran: Interface untuk repository domain yang menghubungkan dengan data layer.
dart
Copy code
// employee_repository.dart
import '../models/employee.dart';

abstract class EmployeeRepository {
  Future<Employee> getEmployeeById(String id);
}
File: get_employee_usecase.dart
Peran: Use case yang menghubungkan BLoC dengan repository untuk mengambil data karyawan.
dart
Copy code
// get_employee_usecase.dart
import '../repositories/employee_repository.dart';
import '../models/employee.dart';

class GetEmployeeUseCase {
  final EmployeeRepository repository;

  GetEmployeeUseCase(this.repository);

  Future<Employee> call(String id) async {
    return await repository.getEmployeeById(id);
  }
}
4. Application Layer (BLoC)
File: employee_bloc.dart
Peran: BLoC yang menangani event dari UI untuk memicu use case mengambil data karyawan.
dart
Copy code
// employee_bloc.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../domain/usecases/get_employee_usecase.dart';
import '../../domain/models/employee.dart';

class EmployeeBloc extends Bloc<EmployeeEvent, EmployeeState> {
  final GetEmployeeUseCase getEmployeeUseCase;

  EmployeeBloc(this.getEmployeeUseCase) : super(EmployeeInitial());

  @override
  Stream<EmployeeState> mapEventToState(EmployeeEvent event) async* {
    if (event is FetchEmployeeEvent) {
      yield EmployeeLoading();
      try {
        final employee = await getEmployeeUseCase(event.id);
        yield EmployeeLoaded(employee: employee);
      } catch (e) {
        yield EmployeeError(message: e.toString());
      }
    }
  }
}
5. Presentation Layer (UI)
File: employee_page.dart
Peran: UI yang memicu BLoC untuk mengambil data karyawan.
dart
Copy code
// employee_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../application/blocs/employee_bloc.dart';

class EmployeePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Employee Details'),
      ),
      body: BlocBuilder<EmployeeBloc, EmployeeState>(
        builder: (context, state) {
          if (state is EmployeeLoading) {
            return CircularProgressIndicator();
          } else if (state is EmployeeLoaded) {
            return Text('Employee: ${state.employee.name}');
          } else if (state is EmployeeError) {
            return Text('Error: ${state.message}');
          }
          return Center(child: Text('Press the button to fetch employee data.'));
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          context.read<EmployeeBloc>().add(FetchEmployeeEvent(id: '123'));
        },
        child: Icon(Icons.search),
      ),
    );
  }
}
Penjelasan DRY
Model: EmployeeModel didefinisikan di core/service/model dan digunakan di berbagai layer (data, domain, presentation).
API Service: ApiService di core/service/api digunakan oleh repository di core/service/repositories/employee_repository.dart yang kemudian digunakan oleh datasource di features.
Repository: Dengan adanya core/service/repositories/employee_repository.dart, pengelolaan data API untuk employee terpusat di satu tempat dan dapat diakses oleh berbagai fitur melalui datasource mereka masing-masing, menjaga kode tetap DRY.
Dengan mengikuti alur ini, Anda dapat memastikan bahwa tidak ada pengulangan kode yang tidak perlu, sambil tetap memanfaatkan konsep Clean Architecture untuk memisahkan tanggung jawab dengan baik.


1/2

You said:
misal nih mau ngepost data dari UI, namun data itu harus di proses terlebih dahulu atau bisa dikatakan bussines logic nya di bagian mana itu diproses atau validasi juga sewakt udi submit
ChatGPT said:
ChatGPT
Untuk memproses data atau melakukan validasi sebelum mengirimkannya ke server, kita bisa memanfaatkan layer domain dalam arsitektur Clean Architecture. Pada layer ini, logika bisnis dan validasi dipisahkan dari layer data dan presentasi, sehingga kode menjadi lebih modular dan mudah dikelola. Berikut adalah alur proses untuk kasus ini:

1. UI Layer (Presentation)
Di UI, pengguna mengisi form dan menekan tombol submit. Event ini kemudian diteruskan ke BLoC atau state management lainnya.

Contoh kode:

dart
Copy code
// register_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../application/blocs/register_bloc.dart';

class RegisterPage extends StatelessWidget {
  final _formKey = GlobalKey<FormState>();
  final _usernameController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Register')),
      body: Form(
        key: _formKey,
        child: Column(
          children: [
            TextFormField(
              controller: _usernameController,
              decoration: InputDecoration(labelText: 'Username'),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter your username';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _passwordController,
              decoration: InputDecoration(labelText: 'Password'),
              obscureText: true,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter your password';
                }
                return null;
              },
            ),
            ElevatedButton(
              onPressed: () {
                if (_formKey.currentState?.validate() ?? false) {
                  // Trigger the register event
                  context.read<RegisterBloc>().add(
                    RegisterSubmitted(
                      username: _usernameController.text,
                      password: _passwordController.text,
                    ),
                  );
                }
              },
              child: Text('Register'),
            ),
          ],
        ),
      ),
    );
  }
}
2. Application Layer (BLoC)
BLoC menerima event dari UI dan meneruskannya ke use case di domain layer untuk diproses lebih lanjut.

Contoh kode:

dart
Copy code
// register_bloc.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../domain/usecases/register_user_usecase.dart';

class RegisterBloc extends Bloc<RegisterEvent, RegisterState> {
  final RegisterUserUseCase registerUserUseCase;

  RegisterBloc(this.registerUserUseCase) : super(RegisterInitial());

  @override
  Stream<RegisterState> mapEventToState(RegisterEvent event) async* {
    if (event is RegisterSubmitted) {
      yield RegisterLoading();
      try {
        // Call the use case to process and register the user
        final result = await registerUserUseCase(
          username: event.username,
          password: event.password,
        );
        yield RegisterSuccess(result);
      } catch (e) {
        yield RegisterError(e.toString());
      }
    }
  }
}
3. Domain Layer (Use Case & Validation)
Di sinilah logika bisnis dan validasi dilakukan. Sebelum data dikirim ke repository untuk diproses oleh data layer, logika bisnis, seperti enkripsi password, validasi tambahan, atau aturan bisnis lainnya, bisa dilakukan di sini.

Contoh kode:

dart
Copy code
// register_user_usecase.dart
import '../repositories/auth_repository.dart';

class RegisterUserUseCase {
  final AuthRepository repository;

  RegisterUserUseCase(this.repository);

  Future<bool> call({required String username, required String password}) async {
    // Contoh logika bisnis: Validasi tambahan atau modifikasi data
    if (password.length < 8) {
      throw Exception("Password must be at least 8 characters long");
    }

    // Contoh lain: Hashing password sebelum dikirim ke repository
    final hashedPassword = _hashPassword(password);

    // Memanggil repository untuk melakukan register
    return await repository.register(username, hashedPassword);
  }

  String _hashPassword(String password) {
    // Implementasi sederhana hashing password
    return password; // Ganti dengan implementasi hashing sebenarnya
  }
}
4. Data Layer (Repository & Datasource)
Di sini data yang telah diproses dan divalidasi oleh domain layer diteruskan ke repository, yang kemudian berinteraksi dengan API atau data source lainnya untuk melakukan operasi CRUD.

Contoh kode:

dart
Copy code
// auth_repository_impl.dart
import '../datasources/auth_remote_datasource.dart';
import '../../domain/repositories/auth_repository.dart';

class AuthRepositoryImpl implements AuthRepository {
  final AuthRemoteDataSource remoteDataSource;

  AuthRepositoryImpl(this.remoteDataSource);

  @override
  Future<bool> register(String username, String hashedPassword) async {
    return await remoteDataSource.register(username, hashedPassword);
  }
}
Datasource:

dart
Copy code
// auth_remote_datasource.dart
import '../../../core/service/api/api_service.dart';

class AuthRemoteDataSource {
  final ApiService apiService;

  AuthRemoteDataSource(this.apiService);

  Future<bool> register(String username, String hashedPassword) async {
    final response = await apiService.post('/register', {
      'username': username,
      'password': hashedPassword,
    });
    return response['success'];
  }
}
5. Core Layer (API Service)
Di sini, ApiService bertanggung jawab untuk melakukan HTTP request.

Contoh kode:

dart
Copy code
// api_service.dart
import 'package:http/http.dart' as http;
import 'dart:convert';

class ApiService {
  final String baseUrl;

  ApiService(this.baseUrl);

  Future<Map<String, dynamic>> post(String endpoint, Map<String, dynamic> body) async {
    final response = await http.post(
      Uri.parse('$baseUrl$endpoint'),
      body: jsonEncode(body),
      headers: {'Content-Type': 'application/json'},
    );
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      throw Exception('Failed to post data');
    }
  }
}
Kesimpulan Alur:
UI: Mengirim event ke BLoC dengan data dari form.
BLoC: Meneruskan event ke use case di domain layer.
Domain (Use Case): Memproses dan memvalidasi data, lalu memanggil repository di data layer.
Data Layer (Repository & Data Source): Repository meneruskan data ke datasource, yang berinteraksi dengan API service.
Core (API Service): Mengirim data yang sudah diproses ke server menggunakan HTTP request.
Dengan struktur ini, logika bisnis dan validasi tidak terjadi di UI atau di data layer, melainkan di domain layer, sesuai dengan prinsip Clean Architecture. Ini memastikan kode tetap modular, mudah diuji, dan dapat di-maintain dengan baik.